$cm_version = '4.8.0'

define append_if_no_such_line($file, $line, $refreshonly = 'false') {
    exec { "/bin/echo '$line' >> '$file'":
        unless      => "/bin/grep -Fxqe '$line' '$file'",
        path        => "/bin",
        refreshonly => $refreshonly,
    }
}

node default {
    include sudo

    sudo::conf { 'wheel':
        priority  => 10,
        content   => "%wheel    ALL=(ALL)   NOPASSWD: ALL\n",
    }

    class { timezone:
        zone => "Europe/Moscow",
    }

    class { 'selinux':
        mode => 'disabled',
    }

    service { "iptables":
        enable => false,
        ensure => stopped,
        hasrestart => true,
        hasstatus => true,
    }

    service { "ip6tables":
        enable => false,
        ensure => stopped,
        hasrestart => true,
        hasstatus => true,
    }

    append_if_no_such_line { sysctl_all_ipv6:
      file => "/etc/sysctl.conf",
      line => "net.ipv6.conf.all.disable_ipv6 = 1"
    }

    append_if_no_such_line { sysctl_default_ipv6:
      file => "/etc/sysctl.conf",
      line => "net.ipv6.conf.default.disable_ipv6 = 1"
    }
	
    class { 'java':
        distribution => 'jre',
    }

    file { '<[apps[app][dir]]>':
        ensure => 'directory',
        owner => 'root',
        group => 'wheel',
        mode => 777
    }
    user {'root':
        ensure => present,
        password => generate('/bin/sh', '-c', "openssl passwd -1 <[root_password]> | tr -d '\n'")
    }
    user {'<[ssh_user]>':
        ensure => present, 
        groups => ['wheel']
    }

}


node '<[hosts[master][name]]>.localdomain' inherits default {
    class { 'haproxy': }
    haproxy::listen { 
        '<[hosts[master][name]]>':
        mode 		 => 'http',
        ipaddress        => '<[hosts[master][ip]]>',
        ports            => '<[apps[app][port]]>',
        options          => {option => ['httpchk']}
    }

    haproxy::balancermember { 
        '<[hosts[slave1][name]]>':
    
        listening_service => '<[hosts[master][name]]>',
        server_names      => '<[hosts[slave1][name]]>.localdomain',
        ipaddresses       => '<[hosts[slave1][ip]]>',
        ports             => '<[apps[app][port]]>',
        options           => 'check'
    }
 
    haproxy::balancermember { 
        '<[hosts[slave2][name]]>':
    
        listening_service => '<[hosts[master][name]]>',
        server_names      => '<[hosts[slave2][name]]>.localdomain',
        ipaddresses       => '<[hosts[slave2][ip]]>',
        ports             => '<[apps[app][port]]>',
        options           => 'check'
    }
	
}

node '<[hosts[slave1][name]]>.localdomain' inherits default {

}
node '<[hosts[slave2][name]]>.localdomain' inherits default {

}
